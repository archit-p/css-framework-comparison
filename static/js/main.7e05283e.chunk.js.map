{"version":3,"sources":["assets/heart.svg","assets/github.svg","components/DataTable.js","api/Github.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DataTable","loading","results","useState","data","setData","useEffect","sort","a","b","nameA","name","toUpperCase","nameB","class","map","row","href","repoURL","src","GithubIcon","alt","width","height","stargazers","forks","issues","standardSize","minifiedSize","gzippedSize","GithubAPI","axios","create","baseURL","headers","interceptors","response","use","res","App","setLoading","requests","i","push","get","then","open_issues_count","stargazers_count","forks_count","length","Promise","all","dayjs","createdAt","format","HeartIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,mC,80CCA3CD,EAAOC,QAAU,IAA0B,oC,gIC2D5BC,EAxDG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAAc,EAClBC,mBAAS,IADS,mBACnCC,EADmC,KAC7BC,EAD6B,KAmB1C,OAhBAC,qBAAU,WACRD,EACEH,EAAQK,MAAK,SAACC,EAAGC,GACf,IAAIC,EAAQF,EAAEG,KAAKC,cACfC,EAAQJ,EAAEE,KAAKC,cACnB,OAAIF,EAAQG,GACF,EAENH,EAAQG,EACH,EAEF,QAGV,CAACX,IAGF,2BAAOY,MAAM,YACX,+BACE,4BACE,oCACA,qCACA,qCACA,sCACA,wCACA,wCACA,oDAGJ,gCACIb,GACAG,EAAKW,KAAI,SAACC,GAAD,OACP,4BACE,4BACGA,EAAIL,KAAM,IACX,uBAAGM,KAAM,qBAAuBD,EAAIE,SAClC,yBAAKC,IAAKC,IAAYC,IAAI,cAAcC,MAAM,KAAKC,OAAO,SAI9D,4BAAKP,EAAIQ,YACT,4BAAKR,EAAIS,OACT,4BAAKT,EAAIU,QACT,4BAAKV,EAAIW,aAAT,OACA,4BAAKX,EAAIY,aAAT,OACA,4BAAKZ,EAAIa,YAAT,c,gCCjDDC,E,OAAYC,EAAMC,OAAO,CACpCC,QAAQ,yBACRC,QAAS,CACP,cAAiB,qDAIrBJ,EAAUK,aAAaC,SAASC,KAAI,SAACC,GACnC,OAAOA,K,2BCoDMC,EArDH,WAAO,IAAD,EACcpC,oBAAS,GADvB,mBACTF,EADS,KACAuC,EADA,KAoBhB,OAlBAlC,qBAAU,WAER,IADA,IAAImC,EAAW,GADD,WAELC,GACHxC,EAAQA,QAAQwC,GAAGxB,SACrBuB,EAASE,KACPb,EAAUc,IAAI,SAAW1C,EAAQA,QAAQwC,GAAGxB,SAAS2B,MAAK,SAACP,GACzDpC,EAAQA,QAAQwC,GAAGhB,OAASY,EAAIlC,KAAK0C,kBACrC5C,EAAQA,QAAQwC,GAAGlB,WAAac,EAAIlC,KAAK2C,iBACzC7C,EAAQA,QAAQwC,GAAGjB,MAAQa,EAAIlC,KAAK4C,iBANnCN,EAAI,EAAGA,EAAIxC,EAAQA,QAAQ+C,OAAQP,IAAM,EAAzCA,GAWTQ,QAAQC,IAAIV,GAAUI,MAAK,WACzBL,GAAW,QAEZ,IAGD,yBAAK1B,MAAM,OACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,UACT,yBAAKA,MAAM,iBACT,0BAAMA,MAAM,SAAZ,4BAC4B,IAC1B,uBAAGG,KAAK,wDACN,yBACEE,IAAKC,IACLC,IAAI,cACJC,MAAM,KACNC,OAAO,SAIb,0BAAMT,MAAM,SAAZ,mBACmBsC,IAAMlD,EAAQmD,WAAWC,OAAO,cADnD,MAIF,yBAAKxC,MAAM,4BACT,kBAAC,EAAD,CAAWb,QAASA,EAASC,QAASA,EAAQA,WAEhD,yBAAKY,MAAM,cAAX,YACW,yBAAKK,IAAKoC,IAAWlC,IAAI,QAAQE,OAAO,KAAKD,MAAM,KAAKR,MAAM,eADzE,wBCxCU0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e05283e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart.37ea68d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.20dd9115.svg\";","import React, { useState, useEffect } from \"react\";\nimport GithubIcon from \"../assets/github.svg\";\n\nconst DataTable = ({ loading, results }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    setData(\n      results.sort((a, b) => {\n        var nameA = a.name.toUpperCase();\n        var nameB = b.name.toUpperCase();\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        return 0;\n      })\n    );\n  }, [results]);\n\n  return (\n    <table class=\"centered\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Stars</th>\n          <th>Forks</th>\n          <th>Issues</th>\n          <th>Standard</th>\n          <th>Minified</th>\n          <th>Minified + Gzipped</th>\n        </tr>\n      </thead>\n      <tbody>\n        {!loading &&\n          data.map((row) => (\n            <tr>\n              <td>\n                {row.name}{' '} \n                <a href={\"https://github.com\" + row.repoURL}>\n                  <img src={GithubIcon} alt=\"github logo\" width=\"16\" height=\"16\"/>\n                </a>\n                \n              </td>\n              <td>{row.stargazers}</td>\n              <td>{row.forks}</td>\n              <td>{row.issues}</td>\n              <td>{row.standardSize} kB</td>\n              <td>{row.minifiedSize} kB</td>\n              <td>{row.gzippedSize} kB</td>\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DataTable;\n","import axios from \"axios\";\n\nexport const GithubAPI = axios.create({\n  baseURL: `https://api.github.com`,\n  headers: {\n    'Authorization': \"Bearer \" + process.env.REACT_APP_GH_TOKEN,\n  },\n});\n\nGithubAPI.interceptors.response.use((res) => {\n  return res;\n});\n","import React, { useEffect, useState } from \"react\";\nimport DataTable from \"./components/DataTable\";\nimport results from \"./results.json\";\nimport dayjs from \"dayjs\";\nimport { GithubAPI } from \"./api/Github\";\nimport \"./App.css\";\nimport GithubIcon from \"./assets/github.svg\";\nimport HeartIcon from \"./assets/heart.svg\";\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    let requests = [];\n    for (let i = 0; i < results.results.length; i++) {\n      if (results.results[i].repoURL) {\n        requests.push(\n          GithubAPI.get(\"/repos\" + results.results[i].repoURL).then((res) => {\n            results.results[i].issues = res.data.open_issues_count;\n            results.results[i].stargazers = res.data.stargazers_count;\n            results.results[i].forks = res.data.forks_count;\n          })\n        );\n      }\n    }\n    Promise.all(requests).then(() => {\n      setLoading(false);\n    });\n  }, []);\n\n  return (\n    <div class=\"row\">\n      <div class=\"container\">\n        <div class=\"column\">\n          <div class=\"column header\">\n            <text class=\"title\">\n              CSS Frameworks Comparison{\" \"}\n              <a href=\"https://github.com/archit-p/css-framework-comparison\">\n                <img\n                  src={GithubIcon}\n                  alt=\"github logo\"\n                  width=\"24\"\n                  height=\"24\"\n                />\n              </a>\n            </text>\n            <text class=\"small\">\n              Last Updated - ({dayjs(results.createdAt).format(\"DD/MM/YYYY\")})\n            </text>\n          </div>\n          <div class=\"table-container centered\">\n            <DataTable loading={loading} results={results.results} />\n          </div>\n          <div class=\"row footer\">\n            Made with<img src={HeartIcon} alt=\"heart\" height=\"16\" width=\"16\" class=\"heart-icon\" />\n            by Archit Pandey\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}